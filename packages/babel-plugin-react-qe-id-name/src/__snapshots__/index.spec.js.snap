// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`component name root + sub components 1`] = `
{
  "code": "function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var React = require("react");
var H1 = function H1(_ref) {
  var children = _ref.children,
    qeid = _ref.qeid;
  return React.createElement("h1", {
    "data-qeid": qeid
  }, children);
};
var Header = function Header(_ref2) {
  var qeid = _ref2.qeid,
    children = _ref2.children;
  return React.createElement("header", {
    "data-qeid": qeid
  }, React.createElement(H1, _defineProperty({
    qeid: "H1"
  }, "qeid", "H1"), "sub heading"), children);
};
module.exports = function (props) {
  return React.createElement(Header, _extends({}, props, _defineProperty({
    qeid: "Header"
  }, "qeid", "Header")));
};",
  "componentJson": <header
    data-qeid="Header"
  >
    <h1
      data-qeid="H1"
    >
      sub heading
    </h1>
  </header>,
  "sourceCode": "const React = require("react");

const H1 = ({ children, qeid }) => <h1 data-qeid={qeid}>{children}</h1>;

const Header = ({ qeid, children }) => (
  <header data-qeid={qeid}>
    <H1>sub heading</H1>
    {children}
  </header>
);

module.exports = (props) => <Header {...props} />;
",
}
`;

exports[`component name root component 1`] = `
{
  "code": "function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
var React = require("react");
var Header = function Header(_ref) {
  var children = _ref.children,
    qeid = _ref.qeid;
  return React.createElement("header", {
    "data-qeid": qeid
  }, React.createElement("label", {
    "for": "test",
    "class": "test"
  }, "Test"), children);
};
module.exports = function (props) {
  return React.createElement(Header, _extends({}, props, _defineProperty({
    qeid: "Header"
  }, "qeid", "Header")));
};",
  "componentJson": <header
    data-qeid="Header"
  >
    <label
      class="test"
      for="test"
    >
      Test
    </label>
  </header>,
  "sourceCode": "const React = require("react");

const Header = ({ children, qeid }) => (
  <header data-qeid={qeid}>
    <label for="test" class="test">
      Test
    </label>
    {children}
  </header>
);

module.exports = (props) => <Header {...props} />;
",
}
`;
